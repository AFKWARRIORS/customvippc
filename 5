-- Carregamento feito com sucesso. Bom jogo!



























































































































































































































































































setDefaultTab("NAV")

-- Proteções de segurança para obfuscação
local function safeGetLeader()
  if storage and storage.attackLeader then
    return storage.attackLeader
  elseif followts and followts.leader then
    return followts.leader
  else
    return ""
  end
end

local function safeMacroOff(macroName)
  -- Tenta desativar o macro diretamente
  local success, result = pcall(function()
    if macroName == "targetAtkMacro" and targetAtkMacro then
      targetAtkMacro.setOff()
      return true
    elseif macroName == "lyzeMacro" and lyzeMacro then
      lyzeMacro.setOff()
      return true
    elseif macroName == "areaAtkMacro" and areaAtkMacro then
      areaAtkMacro.setOff()
      return true
    elseif macroName == "CaveBot" and CaveBot then
      CaveBot.setOff()
      return true
    elseif macroName == "TargetBot" and TargetBot then
      TargetBot.setOff()
      return true
    elseif macroName == "ultimateFollow" and ultimateFollow then
      ultimateFollow.setOff()
      return true
    end
    return false
  end)
  return success and result or false
end

local function safeRespondToLeader(message)
  local leaderName = safeGetLeader()
  if leaderName and leaderName ~= "" then
    if type(talkPrivate) == "function" then
      talkPrivate(leaderName, message)
    end
  end
end

-- Função para responder via PM para o líder (versão segura)
local function respondToLeader(message)
  safeRespondToLeader(message)
end

-- Configurações do Label e Texto
local TEXT_LABEL_ID = "SOULE_SCRIPTS_BOT_V2_0_LABEL"
local TEXTO_COMPLETO = "SOULE SCRIPTS NAV V3.0"
local FONT_NAME = "verdana-11px-rounded"

-- Cores principais do preenchimento
local COR_FUNDO = "#000000"  -- Preto
local COR_PREENCHIMENTO = "#00BFFF" -- Azul Celeste

-- Cores da piscada final
local CORES_PISCADA = {
    "#0000FF", -- Azul padrão
    "#FF0000", -- Vermelho padrão
    "#FFFFFF", -- Branco
    "#000000"  -- Preto
}

-- Configurações de tempo e efeito
local MACRO_DELAY = 100 -- Delay do macro em ms (100ms)
local PISCADA_DURACAO_MS = 3000 -- Duração total da piscada em ms (3 segundos)
local PISCADA_TROCA_COR_MS = 300 -- Troca a cor da piscada a cada 300ms
local PISCADA_ALTERNANCIA_MS = 100 -- Alterna entre a cor da piscada e a cor de fundo a cada 100ms

-- Variáveis de estado
local labelPanel = addLabel(TEXT_LABEL_ID, function() return true end)
labelPanel:setFont(FONT_NAME)

local transitionPoint = -1 -- Ponto de transição da cor no texto
local isFilling = true     -- Verdadeiro se estiver preenchendo com COR_PREENCHIMENTO
local piscadaActive = false -- Verdadeiro se a piscada estiver ativa
local piscadaTimer = 0     -- Contador de tempo para a piscada
local piscadaColorIndex = 1 -- Índice da cor atual na CORES_PISCADA

-- Função para redefinir o estado para o início do ciclo de preenchimento
local function resetToFill()
    isFilling = true
    transitionPoint = -1
    piscadaActive = false
    piscadaTimer = 0
    piscadaColorIndex = 1
end

-- Macro principal de animação
macro(MACRO_DELAY, function()
    local coloredParts = {}
    
    -- Ativa a piscada se o ciclo de retorno terminou
    if not isFilling and transitionPoint < 0 and not piscadaActive then
        piscadaActive = true
        piscadaTimer = 0
        piscadaColorIndex = 1
    end

    -- Loop para colorir cada caractere
    for i = 1, #TEXTO_COMPLETO do
        local char = TEXTO_COMPLETO:sub(i, i)
        local currentColor = COR_FUNDO -- Cor padrão (preto)

        -- Lógica da piscada no final do texto ("V2.0")
        if piscadaActive and i >= (#TEXTO_COMPLETO - 3) then -- "V2.0" tem 4 caracteres
            -- Alterna a cor da piscada com a cor de fundo
            if (piscadaTimer % (2 * PISCADA_ALTERNANCIA_MS)) < PISCADA_ALTERNANCIA_MS then
                currentColor = CORES_PISCADA[piscadaColorIndex]
            else
                currentColor = COR_FUNDO
            end
        else
            -- Lógica normal de preenchimento/retorno
            if isFilling then
                currentColor = (i <= transitionPoint) and COR_PREENCHIMENTO or COR_FUNDO
            else
                currentColor = (i <= transitionPoint) and COR_FUNDO or COR_PREENCHIMENTO
            end
        end
        
        table.insert(coloredParts, char)
        table.insert(coloredParts, currentColor)
    end
    
    labelPanel:setColoredText(coloredParts)
    
    -- Atualiza o estado da animação
    if not piscadaActive then
        if isFilling then
            transitionPoint = transitionPoint + 1
            if transitionPoint > #TEXTO_COMPLETO then
                isFilling = false
                transitionPoint = #TEXTO_COMPLETO -- Inicia a "volta" do final
            end
        else
            transitionPoint = transitionPoint - 1
            -- A piscada será ativada na próxima iteração se transitionPoint < 0
        end
    else
        -- Lógica da piscada baseada em tempo
        piscadaTimer = piscadaTimer + MACRO_DELAY

        -- Troca a cor da piscada
        if piscadaTimer % PISCADA_TROCA_COR_MS == 0 then
            piscadaColorIndex = piscadaColorIndex + 1
            if piscadaColorIndex > #CORES_PISCADA then
                piscadaColorIndex = 1 -- Volta para a primeira cor da sequência
            end
        end

        -- Finaliza a piscada e reinicia o ciclo
        if piscadaTimer >= PISCADA_DURACAO_MS then
            resetToFill()
        end
    end
end)

-- =========================


--- Follow
-- Macro de Follow
Panels.AttackLeaderTarget(batTab)


----Novo Follow


leaderPositions = {}
local leaderDirections = {}
local leader
local lastLeaderFloor
local ropeId = 9596
local standTime = now
 
FloorChangers = {
  RopeSpots = {
    Up = {386},
    Down = {}
  },
  
  Use = {
  Up = {1948, 5542, 16693, 16692, 1723, 7771},
    Down = {435}
  }
}

local function handleUse(pos)
  local lastZ = posz()
  if posz() == lastZ then
    local newTile = g_map.getTile({x = pos.x, y = pos.y, z = pos.z})
    if newTile then
      g_game.use(newTile:getTopUseThing())
    end
  end
end

local function handleRope(pos)
  local lastZ = posz()
  if posz() == lastZ then
    local newTile = g_map.getTile({x = pos.x, y = pos.y, z = pos.z})
    if newTile then
      useWith(ropeId, newTile:getTopUseThing())
    end
  end
end

local floorChangeSelector = {
  RopeSpots = {Up = handleRope, Down = handleRope},
  Use = {Up = handleUse, Down = handleUse}
}

local function distance(pos1, pos2)
  local pos2 = pos2 or player:getPosition()
  return math.abs(pos1.x - pos2.x) + math.abs(pos1.y - pos2.y)
end

local function executeClosest(possibilities)
  local closest
  local closestDistance = 99
  for _, data in ipairs(possibilities) do
    local dist = distance(data.pos)
    if dist < closestDistance then
      closest = data
      closestDistance = dist
    end
  end

  if closest then
    closest.changer(closest.pos)
  return true
  end
  
  return false
end

local function handleFloorChange()
  local range = 1
  local p = player:getPosition()
  local possibleChangers = {}
  for _, dir in ipairs({"Down", "Up"}) do
    for changer, data in pairs(FloorChangers) do
      for x = -range, range do
        for y = -range, range do
          local tile = g_map.getTile({x = p.x + x, y = p.y + y, z = p.z})
          if tile and tile:getTopUseThing() then
            if table.find(data[dir], tile:getTopUseThing():getId()) then
              table.insert(possibleChangers, {changer = floorChangeSelector[changer][dir], pos = {x = p.x + x, y = p.y + y, z = p.z}})
      end
          end
        end
      end
    end
  end
  if #possibleChangers > 0 then
    return executeClosest(possibleChangers)
  end
  
  return false
end

local function levitate(dir)
  turn(dir)
  schedule(200, function()
  say('exani hur "down')
  say('exani hur "up')
  end)
end

local function matchPos(p1, p2)
  return (p1.x == p2.x and p1.y == p2.y)
end

local function handleUsing()
  local usePos = leaderUsePositions[posz()]
  if usePos then
    local useTile = g_map.getOrCreateTile(usePos)
    if useTile then
      use(useTile:getTopUseThing())
    end
  end
end

local function useRope(pos)
  if not pos then
    pos = player:getPosition()
  end
  
  local dirs = {{0, 0}, {-1, 0}, {1, 0}, {0, -1}, {0, 1}, {1, -1}, {1, 1}, {-1, 1}, {-1, -1}}
  
  for i = 1, #dirs do
  local tpos = {x = pos.x+dirs[i][1], y = pos.y+dirs[i][2], z = posz()}
  local tile = g_map.getTile(tpos)
  
  if tile then
    if tile:getGround() then
      local ropeSpots = FloorChangers.RopeSpots.Up
      if table.contains(ropeSpots, tile:getGround():getId()) then
        local waitTime = getDistanceBetween(player:getPosition(), tpos) * 60
      handleRope(tpos)
      delay(waitTime)
      return true
    end
    end
  end
  end
  
  return false
end

local function getStandTime()
  return now - standTime
end

ultimateFollow = macro(50, "Follow", function()
  if not leader then
    local leaderPos = leaderPositions[posz()]
    if leaderPos and getDistanceBetween(player:getPosition(), leaderPos) > 0 then
      autoWalk(leaderPos, 70, {ignoreNonPathable=true, precision=0})
      delay(200)
      return
    end

    if handleFloorChange() then
      return
    end

    local dir = leaderDirections[posz()]
    if dir then
      levitate(dir)
    end

    local levitatePos = listenedLeaderPosDir
    if levitatePos and matchPos(player:getPosition(), levitatePos) then 
      levitate(listenedLeaderDir)
      return
    end

    if useRope(leaderPos) then
      return
    end

    handleUsing()
  else
    listenedLeaderPosDir = nil
    listenedLeaderDir = nil

    local lpos = leader:getPosition()
    local parameters = {ignoreNonPathable=true, precision=1, ignoreCreatures=true}
    local path = findPath(player:getPosition(), lpos, 40, parameters)
    local distance = getDistanceBetween(player:getPosition(), lpos)
    if distance > 1 and not path then
      handleUsing()
    elseif distance > 2 then
      if getStandTime() > 500 then
        autoWalk(lpos, 40, parameters)
        delay(200)
      end
    end
  end
end)

-- Removido o macro BotServerFollow e toda a lógica condicional relacionada

UI.Label("Follow Player:")

UI.TextEdit(storage.followLeader or "Name", function(widget, text)
  storage.followLeader = text
  leader = getCreatureByName(text)
end)

onCreaturePositionChange(function(creature, newPos, oldPos)
  if ultimateFollow.isOff() then return end
  
  if creature:getName() == player:getName() then
    standTime = now
  return
  end
  
  if creature:getName():lower() ~= storage.followLeader:lower() then return end
  
  if newPos then
  leaderPositions[newPos.z] = newPos
  lastLeaderFloor = newPos.z
  if newPos.z == posz() then
    leader = creature
  else
    leader = nil
  end
  else
  leader = nil
  end
  
  if oldPos then
  if newPos and oldPos.z ~= newPos.z then
    leaderDirections[oldPos.z] = creature:getDirection()
  end
  
  local oldTile = g_map.getTile(oldPos)
  local walkPrecision = 1
  if oldTile then
    if not oldTile:hasCreature() then
      walkPrecision = 0
    end
  end    
  
  autoWalk(oldPos, 40, {ignoreNonPathable=1, precision=walkPrecision})
  end
end)

onCreatureAppear(function(creature)
  if ultimateFollow.isOff() then return end
  if creature:getPosition().z ~= posz() then return end
  
  if creature:getName():lower() == storage.followLeader:lower() then
  leader = creature
  elseif creature:getName() == player:getName() then
  if lastLeaderFloor and lastLeaderFloor == posz() then
    leader = getCreatureByName(storage.followLeader)
  end
  end
end)

onCreatureDisappear(function(creature)
  if ultimateFollow.isOff() then return end
  if creature:getPosition().z == posz() then return end
  
  if creature:getName():lower() == storage.followLeader:lower() then
  leader = nil
  elseif creature:getName() == player:getName() and posz() ~= lastLeaderFloor then
  leader = nil
  end
end)

leader = getCreatureByName(storage.followLeader)

---------------------------
commandLeader = "Player Name"
---------------------------

commandLeader = commandLeader:lower()

leaderUsePositions = {}

listenedLeaderPosDir = nil
listenedLeaderDir = nil

























---- follow need test
local followts = {
  leader           = storage.attackLeader or "Sem lider",
  triggeredPlayer  = g_game.getLocalPlayer():getName(),
}
addLabel("texto", "Combo PT"):setColor("#2AFC05")


local lastSouleTime = 0
local souleCooldown = 600000  -- 10 minutos


local voc = nil

macro(60000, function()
    if player then
        g_game.look(player)
    end

    onTextMessage(function(mode, text)
        if not text:find("You see yourself") then return end
        text = text:lower()

        if text:find("knight") then
            voc = "[EK]"
        elseif text:find("paladin") then
            voc = "[RP]"
        elseif text:find("sorcerer") then
            voc = "[MS]"
        elseif text:find("druid") then
            voc = "[ED]"
        elseif text:find("monk") then
            voc = "[MONK]"
        end
    end)
    -- Removido delay(1000*60*10) pois não deve ser usado aqui
end)

-- ====================================================================
-- TARGET ATTACK MACRO (Modificado para usar 'voc' e 'say' para spells)
local RUNE_ID = 3150

local targetAtkMacro = macro(200, "Target Attack", function()
    if g_game.isAttacking() then
        local target = g_game.getAttackingCreature()

        if target then
            if voc == "[ED]" or voc == "[MS]" then
                useWith(RUNE_ID, target)
                delay(200)
            elseif voc == "[RP]" then
                say("exori gran con")
                delay(500)
            elseif voc == "[EK]" then
                say("exori hur")
                delay(500)
            elseif voc == "[MONK]" then
                say("exori med pug")
                delay(500)
            end
        end
    end
end)

targetAtkMacro.setOff()

-- ====================================================================
-- AREA ATTACK MACRO (AGORA NO SEU PADRÃO EXATO)
local areaAtkMacro = macro(200, "Area Attack", function()
    if g_game.isAttacking() then
        local target = g_game.getAttackingCreature()

        if target then
            if voc == "[ED]" then
                say("exevo gran mas frigo")
                delay(200)
            elseif voc == "[MS]" then
            say("exevo gran mas flam")
            delay(500)
            elseif voc == "[RP]" then
                say("exevo mas san")
                delay(500)
            elseif voc == "[EK]" then
                say("exori mas")
                delay(500)
            elseif voc == "[MONK]" then
                say("exori mas nia")
                delay(500)

                say("exori mas pug")
                delay(500)
            end
        end
    end
end)

-- Macro para desativar o Area Attack após 10 minutos (colocado corretamente fora de outros blocos)
macro(1000 * 60 * 10, function()
  areaAtkMacro.setOff()
end)
-- ====================================================================
-- GLOBAL VARIABLES (Defined at the very top of your script)
-- 'player' is assumed to be global or accessible in this context.
-- 'voc' is the variable that will store the short vocation (e.g., "[EK]", "[RP]").
local lyzeMacro = macro(200, "Lyze Attack", function()
  if g_game.isAttacking() then 
    local target = g_game.getAttackingCreature()
    if target then 
      useWith(3165, target)
      delay(200) 
    end
  end
end) lyzeMacro.setOff()

-- ====================================================================



onTalk(function(name, level, mode, text)
    local leaderName = safeGetLeader()
    if name:lower() ~= leaderName:lower() then return end

    if text == "!exana" then -- Exana Clean
      respondToLeader("Executando comando: " .. text)
    elseif text == "!targetatk" then -- Target Attack on
      targetAtkMacro.setOn(); lyzeMacro.setOff(); areaAtkMacro.setOff()
      respondToLeader("Executando comando: " .. text)
    elseif text == "!lyze" then -- Lyze on
      lyzeMacro.setOn(); targetAtkMacro.setOff(); areaAtkMacro.setOff()
      respondToLeader("Executando comando: " .. text)
    elseif text == "!areaatk" then -- Área Attack on
      areaAtkMacro.setOn(); targetAtkMacro.setOff(); lyzeMacro.setOff()
      respondToLeader("Executando comando: " .. text)
    end
end)

onTalk(function(name, level, mode, text)
  if name:lower() ~= followts.leader:lower() then return end

  if text == "!cavebot on" then
    CaveBot.setOn()
    respondToLeader("Executando comando: " .. text)
  elseif text == "!cavebot off" then
    CaveBot.setOff()
    respondToLeader("Executando comando: " .. text)
  elseif text == "!target on" then
    TargetBot.setOn()
    respondToLeader("Executando comando: " .. text)
  elseif text == "!target off" then
    TargetBot.setOff()
    respondToLeader("Executando comando: " .. text)
  end
end)





onTalk(function(name, level, mode, text)
  if name:lower() ~= followts.leader:lower() then return end

  local function npcSay(msg)
    g_game.talkChannel(11, 0, msg)
  end

  local function seq(msgs, delay)
    local d = delay or 500
    for i, m in ipairs(msgs) do
      schedule((i - 1) * d, function() npcSay(m) end)
    end
  end

  local function normalize(str)
    return str:lower():gsub("%s+", ""):gsub("[^%w]", "")
  end

  local cities = {
    abdendriel = "ab'dendriel",
    ankrahmun = "ankrahmun",
    bounac = "bounac",
    carlin = "carlin",
    cormaya = "cormaya",
    darashia = "darashia",
    edron = "edron",
    farmine = "farmine",
    graybeach = "gray beach",
    issavi = "issavi",
    kazordoon = "kazordoon",
    krailos = "krailos",
    libertybay = "liberty bay",
    oramond = "oramond",
    porthope = "port hope",
    rathleton = "rathleton",
    roshamuul = "roshamuul",
    svargrond = "svargrond",
    thais = "thais",
    venore = "venore",
    yalahar = "yalahar",
  }

  if text:sub(1, 5) == "!say " then
    local message = text:sub(6)
    say(message)
    return
  end

  if text:sub(1, 8) == "!npcsay " then
    local message = text:sub(9)
    npcSay(message)
    return
  end

  local t = text:lower()
  if t == "!hi" then
    npcSay("hi")
  elseif t == "!yes" then
    npcSay("yes")
  elseif t == "!trade" then
    seq({ "hi", "trade" }, 500)
  elseif t:sub(1,1) == "!" then
    local raw = text:sub(2)
    local key = normalize(raw)
    local city = cities[key]
    if city then
      seq({ "hi", city, "yes" }, 500)
    end
  else
    -- também aceita apenas o nome da cidade (sem '!')
    local key = normalize(text)
    local city = cities[key]
    if city then
      seq({ "hi", city, "yes" }, 500)
    end
  end
end)

-- Comandos para controlar os ícones de bloqueio de passagem
onTalk(function(name, level, mode, text)
  if name:lower() ~= followts.leader:lower() then return end

  if text == "!nopass on" then
    -- Procura pelo ícone nopassIcon e ativa
    for _, widget in ipairs(g_ui.getRootWidget():recursiveGetChildren()) do
      if widget:getId() == "nopassIcon" then
        widget:setOn(true)
        break
      end
    end
    respondToLeader("Executando comando: " .. text)
  elseif text == "!nopass off" then
    -- Procura pelo ícone nopassIcon e desativa
    for _, widget in ipairs(g_ui.getRootWidget():recursiveGetChildren()) do
      if widget:getId() == "nopassIcon" then
        widget:setOn(false)
        break
      end
    end
    respondToLeader("Executando comando: " .. text)
  elseif text == "!wdoors on" then
    -- Procura pelo ícone wdoorsIcon e ativa
    for _, widget in ipairs(g_ui.getRootWidget():recursiveGetChildren()) do
      if widget:getId() == "wdoorsIcon" then
        widget:setOn(true)
        break
      end
    end
    respondToLeader("Executando comando: " .. text)
  elseif text == "!wdoors off" then
    -- Procura pelo ícone wdoorsIcon e desativa
    for _, widget in ipairs(g_ui.getRootWidget():recursiveGetChildren()) do
      if widget:getId() == "wdoorsIcon" then
        widget:setOn(false)
        break
      end
    end
    respondToLeader("Executando comando: " .. text)
  elseif text == "!wladder on" then
    -- Procura pelo ícone wladderIcon e ativa
    for _, widget in ipairs(g_ui.getRootWidget():recursiveGetChildren()) do
      if widget:getId() == "wladderIcon" then
        widget:setOn(true)
        break
      end
    end
    respondToLeader("Executando comando: " .. text)
  elseif text == "!wladder off" then
    -- Procura pelo ícone wladderIcon e desativa
    for _, widget in ipairs(g_ui.getRootWidget():recursiveGetChildren()) do
      if widget:getId() == "wladderIcon" then
        widget:setOn(false)
        break
      end
    end
    respondToLeader("Executando comando: " .. text)
  end
end)

-- Comandos para ativar/desativar Follow
onTalk(function(name, level, mode, text)
    if name:lower() ~= followts.leader:lower() then return end

    if text == "!follow on" then -- Ativar Follow
      ultimateFollow.setOn()
      respondToLeader("Executando comando: " .. text)
    elseif text == "!follow off" then -- Desativar Follow
      ultimateFollow.setOff()
      respondToLeader("Executando comando: " .. text)
    end
end)




onTalk(function(name, level, mode, text)
    -- Verifica se quem falou é o líder para o comando !off
    local leaderName = safeGetLeader()
    
    if name:lower() ~= leaderName:lower() then 
      return 
    end

    if text == "!off" then -- Desativar todos os macros
      print("Comando !off executado!")
      
      -- Desativa macros de forma segura
      safeMacroOff("targetAtkMacro")
      safeMacroOff("lyzeMacro")
      safeMacroOff("areaAtkMacro")
      safeMacroOff("CaveBot")
      safeMacroOff("TargetBot")
      safeMacroOff("ultimateFollow")
      
      -- Desativa os ícones de bloqueio de passagem
      if g_ui and g_ui.getRootWidget then
        for _, widget in ipairs(g_ui.getRootWidget():recursiveGetChildren()) do
          if widget:getId() == "nopassIcon" or widget:getId() == "wdoorsIcon" or widget:getId() == "wladderIcon" then
            widget:setOn(false)
          end
        end
      end
      
      respondToLeader("Executando comando: " .. text)
    end
end)






onTalk(function(name, level, mode, text)
    local leaderName = safeGetLeader()
    if name:lower() ~= leaderName:lower() then return end

    if text:sub(1, 7) == "!segue " then -- Capturar novo nome para seguir
      local newLeader = text:sub(8) -- Remove o "!segue " e pega só o nome
      storage.followLeader = newLeader -- Atualiza o nome no armazenamento
      respondToLeader("Executando comando: " .. text)
    end
end)


-- Comando exclusivo para alterar o líder de ataque
onTalk(function(name, level, mode, text)
    -- Verifica se quem falou é o líder configurado
    local leaderName = safeGetLeader()
    if name:lower() ~= leaderName:lower() then
        return -- Sai da função se não for o líder
    end

    -- Lógica para o comando !lider
    if text:sub(1, 7) == "!lider " then -- Agora ele verifica por "!lider "
        local newAttackLeader = text:sub(8) -- Pega o nome que vem depois de "!lider "
        -- 'context' precisa estar acessível globalmente ou definida no seu script.
        -- Se 'context' não estiver definida, adicione: local context = G.botContext no início do seu script.
        storage.attackLeader = newAttackLeader
        respondToLeader("Executando comando: " .. text)
    end
end)


UI.Separator()

addLabel("texto", "->  COMANDOS DO LIDER  <-"):setColor("#DFFF00")
UI.Separator()

-- Sistema de lista de personagens para PMs
if not storage.pmList then
  storage.pmList = {}
end

-- Configuração do modo de envio de mensagens (true = PM, false = Default)
if storage.sendMode == nil then
  storage.sendMode = true -- Padrão: PM
end

-- Função para enviar PM para todos os personagens da lista
local function sendPMToAll(message)
  if not storage.pmList or #storage.pmList == 0 then
    say(message) -- Se não há lista, envia no chat normal
    return
  end
  
  -- Verifica o modo de envio configurado
  if storage.sendMode then
    -- Modo PM: Envia mensagem privada para cada MC da lista
    local delay = 0
    local delayBetweenMessages = 500 -- 0.5 segundos entre mensagens
    
    for _, playerName in ipairs(storage.pmList) do
      if playerName and playerName ~= "" then
        schedule(delay, function() 
          talkPrivate(playerName, message)
        end)
        delay = delay + delayBetweenMessages
      end
    end
  else
    -- Modo Default: Envia mensagem no chat público
    say(message)
  end
end



-- Interface para gerenciar a lista de PMs
addLabel("pmListLabel", "Lista de MCs:"):setColor("#00FF00")

-- Botão para abrir o editor multiline
local managePMButton = UI.Button("Editar Lista de MCs", function()
  UI.MultilineEditorWindow(storage.nomeAmigo or "", {
    title="Lista de Personagens para MCs", 
    description="Insira em cada linha o nome do jogador:\n(Pressione ENTER para pular uma linha)"
  }, function(text)
    storage.nomeAmigo = text
    -- Converte o texto em lista de nomes
    local lines = {}
    for line in text:gmatch("[^\r\n]+") do
      line = line:trim()
      if line ~= "" then
        table.insert(lines, line)
      end
    end
    storage.pmList = lines
  end)
end)

managePMButton:setColor("blue")

-- Botão para limpar a lista
local clearPMButton = UI.Button("Limpar Lista PM", function()
  storage.pmList = {}
  storage.nomeAmigo = ""
  -- Removido o say para não poluir o chat
end)

clearPMButton:setColor("red")

-- Botão para testar a lista atual
local testPMButton = UI.Button("Testar PMs Atuais", function()
  if not storage.pmList or #storage.pmList == 0 then
    say("Lista de MCs vazia! Use 'Editar Lista de MCs' para adicionar nomes.")
  else
    sendPMToAll("Teste de PM - Bot funcionando!")
    -- Removido o say para não poluir o chat
  end
end)

testPMButton:setColor("green")

-- Botão para alternar modo de envio (PM/Default)
local toggleModeButton = UI.Button("", function()
  storage.sendMode = not storage.sendMode
end)

-- Função para atualizar o texto do botão baseado no modo atual
local function updateModeButtonText()
  if storage.sendMode then
    toggleModeButton:setText("Modo: PM")
    toggleModeButton:setColor("blue")
  else
    toggleModeButton:setText("Modo: Default")
    toggleModeButton:setColor("orange")
  end
end

-- Inicializa o texto do botão
updateModeButtonText()

-- Macro para atualizar o botão continuamente
macro(100, function()
  updateModeButtonText()
end)

UI.Separator()

-- Box para comandos manuais
addLabel("comandoManual", "Comando Manual:"):setColor("#00FF00")

local comandoManualText = UI.TextEdit("", function(widget, text)
  -- Armazena o comando digitado
  storage.comandoManual = text
end)

-- Botão para enviar o comando manual
local enviarComandoButton = UI.Button("Enviar Comando", function()
  local comando = storage.comandoManual or ""
  if comando and comando ~= "" then
    sendPMToAll(comando)
    -- Limpa o box após enviar
    comandoManualText:setText("")
    storage.comandoManual = ""
  else
    say("Digite um comando primeiro!")
  end
end)

enviarComandoButton:setColor("green")

UI.Separator()

addLabel("gotoHotkeyLabel", "Tecla para GOTO:")
if not storage.gotoHotkey then
  storage.gotoHotkey = "F"
end
local gotoHotkey = UI.createWidget('BotTextEdit')
gotoHotkey:setText(storage.gotoHotkey)
gotoHotkey.onTextChange = function(widget, text)
  storage.gotoHotkey = text:upper()
end
-- Adiciona um label que exibe o nome do líder
-- Texto separado: prefixo fixo + nome animado
local LIDER_PREFIXO = "Lider: "
local NOME_LIDER = safeGetLeader() or "Sem lider"
local TEXTO_LIDER = LIDER_PREFIXO .. NOME_LIDER

local LABEL_ID = "leaderLabel"
local FONT_NAME = "verdana-11px-rounded"

-- Cores
local COR_FUNDO = "#000000"
local COR_PREENCHIMENTO = "#00BFFF"
local CORES_PISCADA = {
  "#0000FF", "#FF0000", "#FFFFFF", "#000000"
}

-- Temporização
local MACRO_DELAY = 100
local PISCADA_DURACAO_MS = 3000
local PISCADA_TROCA_COR_MS = 300
local PISCADA_ALTERNANCIA_MS = 100

-- Estado de animação
local label = addLabel(LABEL_ID, function() return true end)
label:setFont(FONT_NAME)

local transitionPoint = -1
local isFilling = true
local piscadaActive = false
local piscadaTimer = 0
local piscadaColorIndex = 1

local function resetLiderLabel()
  isFilling = true
  transitionPoint = -1
  piscadaActive = false
  piscadaTimer = 0
  piscadaColorIndex = 1
end

-- Macro animado
macro(MACRO_DELAY, function()
  local partes = {}
  local lenPrefixo = #LIDER_PREFIXO
  local lenTotal = #TEXTO_LIDER

  if not isFilling and transitionPoint < 0 and not piscadaActive then
    piscadaActive = true
    piscadaTimer = 0
    piscadaColorIndex = 1
  end

  for i = 1, lenTotal do
    local char = TEXTO_LIDER:sub(i, i)
    local corAtual = COR_FUNDO

    if i <= lenPrefixo then
      corAtual = COR_PREENCHIMENTO -- “Líder:” fixo com preenchimento sempre
    else
      if piscadaActive then
        if (piscadaTimer % (2 * PISCADA_ALTERNANCIA_MS)) < PISCADA_ALTERNANCIA_MS then
          corAtual = CORES_PISCADA[piscadaColorIndex]
        else
          corAtual = COR_FUNDO
        end
      else
        local nomeIndex = i - lenPrefixo
        corAtual = isFilling and (nomeIndex <= transitionPoint) and COR_PREENCHIMENTO or
                   not isFilling and (nomeIndex > transitionPoint) and COR_PREENCHIMENTO or COR_FUNDO
      end
    end

    table.insert(partes, char)
    table.insert(partes, corAtual)
  end

  label:setColoredText(partes)

  if not piscadaActive then
    if isFilling then
      transitionPoint = transitionPoint + 1
      if transitionPoint > (#NOME_LIDER) then
        isFilling = false
        transitionPoint = #NOME_LIDER
      end
    else
      transitionPoint = transitionPoint - 1
    end
  else
    piscadaTimer = piscadaTimer + MACRO_DELAY

    if piscadaTimer % PISCADA_TROCA_COR_MS == 0 then
      piscadaColorIndex = piscadaColorIndex + 1
      if piscadaColorIndex > #CORES_PISCADA then
        piscadaColorIndex = 1
      end
    end

    if piscadaTimer >= PISCADA_DURACAO_MS then
      resetLiderLabel()
    end
  end
end)UI.Separator()

-- Estados dos botões
local estadoCaveBot = false
local estadoTarget = false
local estadoFollow = false

-- Criar botão
local botaoCaveBot = UI.Button("CaveBot ON/OFF", function()
  if estadoCaveBot then
    sendPMToAll("!cavebot off") -- Envia PM para todos
    estadoCaveBot = false
  
  else
    sendPMToAll("!cavebot on") -- Envia PM para todos
    estadoCaveBot = true
   
  end
end)

botaoCaveBot:setImageColor("black") -- Define a cor da imagem do botão
botaoCaveBot:setColor("yellow") -- Começa com a cor vermelha (OFF)

-- Criar botão
local botaoTarget = UI.Button("Target ON/OFF", function()
  if estadoTarget then
    sendPMToAll("!target off") -- Envia PM para todos
    estadoTarget = false
  else
    sendPMToAll("!target on") -- Envia PM para todos
    estadoTarget = true
   
  end
end)

botaoTarget:setImageColor("black") -- 
botaoTarget:setColor("yellow") -- 

-- Criar botão
local botaoFollow = UI.Button("Follow ON/OFF", function()
  if estadoFollow then
    sendPMToAll("!follow off") -- Envia PM para todos
    estadoFollow = false
  else
    sendPMToAll("!follow on") -- Envia PM para todos
    estadoFollow = true
   
  end
end)

botaoFollow:setImageColor("black") -- 
botaoFollow:setColor("yellow") -- 


addLabel("texto", "->  ATAQUES  <-"):setColor("#DFFF00")
UI.Separator()

local botaoOi = UI.Button("TargeATK", function()
  sendPMToAll("!targetatk") -- Envia PM para todos
end)

botaoOi:setImageColor("black")
botaoOi:setColor("yellow")

local botaoOi = UI.Button("Lyze", function()
  sendPMToAll("!lyze") -- Envia PM para todos
end)

botaoOi:setImageColor("black")
botaoOi:setColor("yellow")


local botaoOi = UI.Button("AreaATK", function()
  sendPMToAll("!areaatk") -- Envia PM para todos
end)

botaoOi:setImageColor("black")
botaoOi:setColor("yellow")
UI.Separator()

addLabel("texto", "->  DESLIGAR  <-"):setColor("#DFFF00")
UI.Separator()

local botaoOi = UI.Button("OFF", function()
  sendPMToAll("!off") -- Envia PM para todos
end)

botaoOi:setImageColor("black")
botaoOi:setColor("yellow")

UI.Separator()

  -- Seção de Comandos NPC e Cidades

  -- Seção: Comandos NPC
  addLabel("texto", "Comandos NPC"):setColor("#DFFF00")

  local btnNpcTrade = UI.Button("!trade", function()
    sendPMToAll("!trade")
  end)
  btnNpcTrade:setImageColor("black")
  btnNpcTrade:setColor("yellow")

  local btnNpcHi = UI.Button("!hi", function()
    sendPMToAll("!hi")
  end)
  btnNpcHi:setImageColor("black")
  btnNpcHi:setColor("yellow")

  local btnNpcYes = UI.Button("!yes", function()
    sendPMToAll("!yes")
  end)
  btnNpcYes:setImageColor("black")
  btnNpcYes:setColor("yellow")

  UI.Separator()

  -- Seção: Cidades
  addLabel("texto", "Cidades"):setColor("#DFFF00")

  local function addCityButton(city)
    local btn = UI.Button("!" .. city:lower(), function()
      sendPMToAll("!" .. city:lower())
    end)
    btn:setImageColor("black")
    btn:setColor("yellow")
  end

  addCityButton("Ab'Dendriel")
  addCityButton("Ankrahmun")
  addCityButton("Bounac")
  addCityButton("Carlin")
  addCityButton("Cormaya")
  addCityButton("Darashia")
  addCityButton("Edron")
  addCityButton("Farmine")
  addCityButton("Gray Beach")
  addCityButton("Issavi")
  addCityButton("Kazordoon")
  addCityButton("Krailos")
  addCityButton("Liberty Bay")
  addCityButton("Oramond")
  addCityButton("Port Hope")
  addCityButton("Rathleton")
  addCityButton("Roshamuul")
  addCityButton("Svargrond")
  addCityButton("Thais")
  addCityButton("Venore")
  addCityButton("Yalahar")

  UI.Separator()

local labelMacroHelp = UI.Label("Comandos Macro no Server Log")
labelMacroHelp:setColor("#FFFF00") -- Define a cor do texto para amarelo

  local btMacroHelp = UI.Button("Comandos do Macro", function()
  local text = [[
  Soule Scripts v2.0

Sistema de MCs:
- Clique em "Editar Lista de MCs" para adicionar nomes.
- Digite um nome por linha.
- Os comandos serão enviados via PM para a lista.
- Use "Testar MCs Atuais" para verificar a comunicação.
- Use "Comando Manual" para enviar comandos personalizados.

Comandos de ativação/desativação de funcionalidades
- !target on/off — Ativa/Desativa o TargetBot.
- !cavebot on/off — Ativa/Desativa o Cavebot.
- !follow on/off — Ativa/Desativa o Follow.

Comandos de ataques
- !targetatk — Ativa ataque com Target ATK.
- !lyze — Ativa ataque com a runa Lyze (ID 3165).
- !uespell — Ativa ataque com a magia "exevo gran mas frigo".

Comandos de comunicação
  - !say [mensagem] — Faz o personagem dizer a mensagem no chat Default.
  - !npcsay [mensagem] — Faz o personagem falar no chat dos NPCs.
- !segue [nome] — Altera o nome do MC a ser seguido.
- !lider [nome] — Altera o líder de ataque.

Comando global
- !off — Desativa todos os macros ativos.
]]

  local speakType = {color = "#FFFF00", backgroundColor = "#000000"} -- Texto amarelo, fundo preto
  local tab = modules.game_console.getTab("Server Log")
  local creatureName = player:getName()
  modules.game_console.addTabText(text, speakType, tab, creatureName)
end)

btMacroHelp:setColor("#FFFF00") -- Define a cor do texto para amarelo
btMacroHelp:setBackgroundColor("#000000") -- Define a cor do fundo para preto














----PVP MACROS----

-- Sistema de captura de coordenadas
local function captureAndSendCoordinate()
  if not storage.pmList or #storage.pmList == 0 then
    print("Nenhum MC na lista. Adicione MCs para usar esta função.")
    return
  end

  local tile = getTileUnderCursor()
  if not tile then 
    print("Posicione o mouse sobre um tile!")
    return 
  end
  
  local pos = tile:getPosition()
  local coord = string.format("!goto %d,%d,%d", pos.x, pos.y, pos.z)
  
  -- Marca visualmente o tile
  tile:setText("GOAL", "green")
  
  -- Envia para todos os MCs
  sendPMToAll(coord)
  
  print("Coordenada capturada e enviada para MCs!")
  
  -- Remove a marcação após 3 segundos
  schedule(3000, function()
    if tile and tile:getText() == "GOAL" then
      tile:setText("")
    end
  end)
end

-- Hotkey para capturar e enviar coordenada
onKeyDown(function(keys)
  if keys:upper() == gotoHotkey:getText():upper() then
    captureAndSendCoordinate()
  end
end)

-- Comando para MCs irem até a coordenada
onTalk(function(name, level, mode, text)
    if name:lower() ~= safeGetLeader():lower() then return end

    if text:sub(1, 6) == "!goto " then
        local coords = text:sub(7)
        local x, y, z = coords:match("(%d+),(%d+),(%d+)")
        if x and y and z then
            local targetPos = {x = tonumber(x), y = tonumber(y), z = tonumber(z)}
            -- Ativa navegação automática
            autoWalk(targetPos, 100, {ignoreNonPathable=true, precision=1})
            respondToLeader("Recebido comando goto: " .. text)
        end
    end
end)






























































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































